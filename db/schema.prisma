generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider          = "mysql"
    url               = env("DATABASE_URL")
    shadowDatabaseUrl = env("DATABASE_URL_SHADOW")
    relationMode      = "prisma"
}

model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String?
    access_token      String?
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String?
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@index([userId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId])
}

model User {
    id            String       @id @default(cuid())
    name          String?
    email         String?      @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    reactions     Reaction[]
    comments      Comment[]
    subComments   SubComment[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Reaction {
    id        String   @id @default(cuid())
    userId    String   @map("user_id")
    slug      String
    name      String
    createdAt DateTime @default(now()) @map("created_at")
    User      User?    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId])
}

model Comment {
    id          String       @id @default(cuid())
    userId      String       @map("user_id")
    slug        String
    body        String
    createdAt   DateTime     @default(now()) @map("created_at")
    User        User?        @relation(fields: [userId], references: [id], onDelete: Cascade)
    subcomments SubComment[]

    @@index([userId])
}

model SubComment {
    id        String   @id @default(cuid())
    commentId String   @map("comment_id")
    userId    String   @map("user_id")
    slug      String
    body      String
    createdAt DateTime @default(now()) @map("created_at")
    Comment   Comment? @relation(fields: [commentId], references: [id], onDelete: Cascade)
    User      User?    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([commentId])
    @@index([userId])
}
